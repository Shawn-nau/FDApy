.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_univariate_fpca.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_univariate_fpca.py:


Univariate Functional Principal Components Analysis
===================================================

This notebook shows how to perform an univariate functional principal
components analysis on an example dataset.


.. code-block:: default


    # Author: Steven Golovkine <steven_golovkine@icloud.com>
    # License: MIT

    # shinx_gallery_thumbnail_number = 2

    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd

    from FDApy.univariate_functional import UnivariateFunctionalData
    from FDApy.fpca import UFPCA
    from FDApy.plot import plot









Load the data into Pandas dataframe


.. code-block:: default

    temperature = pd.read_csv('./data/canadian_temperature_daily.csv',
                              index_col=0)

    # Create univariate functional data for the daily temperature data.
    argvals = pd.factorize(temperature.columns)[0]
    values = np.array(temperature) / 4
    dailyTemp = UnivariateFunctionalData(argvals, values)








Perform a univariate functional PCA and explore the results.


.. code-block:: default


    # Perform a univariate FPCA on dailyTemp.
    fpca = UFPCA(n_components=0.99)
    fpca.fit(dailyTemp, method='GAM', kernel='gaussian', bandwidth=50)

    # Plot the results of the FPCA (eigenfunctions)
    for idx, eigenfunction in enumerate(fpca.eigenfunctions):
        plt.plot(eigenfunction, label=' '.join(['Eigenfunction', str(idx + 1)]))
    plt.xlabel('Days')
    plt.title('Eigenfunctions')
    plt.legend()




.. image:: /auto_examples/images/sphx_glr_plot_univariate_fpca_001.png
    :alt: Eigenfunctions
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fadde841a58>



Compute the scores of the dailyTemp data into the eigenfunctions basis using
numerical integration.


.. code-block:: default


    # Compute scores
    dailyTemp_proj = fpca.transform(dailyTemp, method='NumInt')

    # Plot the projection of the data onto the eigenfunctions
    _ = pd.plotting.scatter_matrix(pd.DataFrame(dailyTemp_proj), diagonal='kde')




.. image:: /auto_examples/images/sphx_glr_plot_univariate_fpca_002.png
    :alt: plot univariate fpca
    :class: sphx-glr-single-img





Then, we can test if the reconstruction of the data is good.


.. code-block:: default


    # Test if the reconstruction is good.
    dailyTemp_reconst = fpca.inverse_transform(dailyTemp_proj)

    # Plot the reconstructed curves
    fig, ax = plot(dailyTemp_reconst,
                   main='Daily temperature',
                   xlab='Day',
                   ylab='Temperature')



.. image:: /auto_examples/images/sphx_glr_plot_univariate_fpca_003.png
    :alt: Daily temperature
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.129 seconds)


.. _sphx_glr_download_auto_examples_plot_univariate_fpca.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_univariate_fpca.py <plot_univariate_fpca.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_univariate_fpca.ipynb <plot_univariate_fpca.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
