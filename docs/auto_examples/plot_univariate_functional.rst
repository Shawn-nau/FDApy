.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_univariate_functional.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_univariate_functional.py:


Smooth Univariate Functional data
=================================

This notebook shows how to smooth univariate functional data.


.. code-block:: default


    # Author: Steven Golovkine <steven_golovkine@icloud.com>
    # License: MIT

    # shinx_gallery_thumbnail_number = 2

    import matplotlib.pyplot as plt

    from FDApy.basis import Brownian
    from FDApy.plot import plot









Generate some data as Fractional Brownian motion.



.. code-block:: default


    # Simulate some fractional brownian motions.
    sim = Brownian(N=1000, M=300, brownian_type='fractional')
    sim.new(x0=0, H=0.5)
    sim.add_noise(0.05)

    # Plot some simulations
    fig, ax = plot(sim.noisy_obs_,
                   main='Fractional Brownian motion',
                   xlab='Sampling points')




.. image:: /auto_examples/images/sphx_glr_plot_univariate_functional_001.png
    :alt: Fractional Brownian motion
    :class: sphx-glr-single-img





Now, we will smooth the data according the methodology from (add ref).



.. code-block:: default


    # Smooth the data
    sim_smooth = sim.noisy_obs_.smooth(t0=0.5, k0=14)

    # Plot of the smoothing data
    fig, ax = plot(sim_smooth,
                   main='Fractional Brownian motion smoothed',
                   xlab='Sampling points')




.. image:: /auto_examples/images/sphx_glr_plot_univariate_functional_002.png
    :alt: Fractional Brownian motion smoothed
    :class: sphx-glr-single-img





In order to look more precisely at the smoothing results, let's plot one
individual curve, along its noisy and smoothed version.



.. code-block:: default


    # Plot individual curves
    idx = 5
    fig, ax = plt.subplots(1, 1)
    ax.scatter(sim.noisy_obs_.argvals[0],
               sim.noisy_obs_.values[idx, :],
               alpha=0.5, label='Noisy')
    ax.plot(sim.obs_.argvals[0], sim.obs_.values[idx, :],
            color='red', label='True')
    ax.plot(sim_smooth.argvals[idx], sim_smooth.values[idx],
            color='green', label='Smooth')
    ax.set_xlabel('Sampling points')
    ax.legend()



.. image:: /auto_examples/images/sphx_glr_plot_univariate_functional_003.png
    :alt: plot univariate functional
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fadde4805f8>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  11.739 seconds)


.. _sphx_glr_download_auto_examples_plot_univariate_functional.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_univariate_functional.py <plot_univariate_functional.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_univariate_functional.ipynb <plot_univariate_functional.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
