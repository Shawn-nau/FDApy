.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_cd4.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_cd4.py:


CD4 cell count analysis
=======================

This notebook shows how to deal with irregular functional data by analyzing the
dataset CD4 cell count.


.. code-block:: default


    # Author: Steven Golovkine <steven_golovkine@icloud.com>
    # License: MIT

    # shinx_gallery_thumbnail_number = 2

    import numpy as np
    import pandas as pd

    from FDApy.irregular_functional import IrregularFunctionalData
    from FDApy.plot import plot








Load the data into Pandas dataframe.


.. code-block:: default

    cd4 = pd.read_csv('./data/cd4.csv', index_col=0)









Create IrregularFunctionalData for cd4 data.


.. code-block:: default

    all_argvals = cd4.columns.astype(np.int64)
    argvals = [np.array(all_argvals[~np.isnan(row)]) for row in cd4.values]
    values = [row[~np.isnan(row)] for row in cd4.values]
    cd4counts = IrregularFunctionalData(argvals, values)








Print out an Irregular Functional data object.


.. code-block:: default


    # Print irregular functional data
    print(cd4counts)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Irregular Functional data objects with 366 observations of 1-dimensional support
    argvals:
            Values in -18 ... 42.
    values:
            Values in 10.0 ... 3184.0.
    There are 1 - 11 sampling points per observation.




The sampling points of the data can easily be accessed.


.. code-block:: default


    # Accessing the argvals of the object
    print(cd4counts.argvals[0:5])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([-9, -3,  3]), array([-3,  3,  9, 15]), array([-15,  -9,  -3,   3,   9,  17,  22,  29]), array([-17,  -9,  -3,   3]), array([-4,  4, 10, 13, 19, 25, 32, 38])]




The values associated to the sampling points are retrieved in a same way
than the sampling points.


.. code-block:: default


    # Accessing the values of the object
    print(cd4counts.values[0:5])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([548., 893., 657.]), array([752., 459., 181., 434.]), array([ 846., 1102.,  801.,  824.,  866.,  704.,  757.,  726.]), array([1277., 1132., 1454.,  738.]), array([994., 486., 605., 880., 352., 376., 212., 237.])]




The number of observations within the data are obtained using the function
:func:`~FDApy.irregular_functional.IrregularFunctional.nObs`.


.. code-block:: default


    # Get the number of observations for the object
    print(cd4counts.nObs())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    366




The number of sampling points per observation is given by the function
:func:`~FDApy.irregular_functional.IrregularFunctional.nObsPoint`.


.. code-block:: default


    # Retrieve the number of sampling points for the object
    print(cd4counts.nObsPoint()[0:5])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [3, 4, 8, 4, 8]




The dimension of the data is given by the function
:func:`~FDApy.irregular_functional.IrregularFunctional.dimension`.


.. code-block:: default


    # Get the dimension of the domain of the observations
    print(cd4counts.dimension())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    1




The extraction of observations is also easily done.


.. code-block:: default


    # Extract observations from the object
    print(cd4counts[5:8])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Irregular Functional data objects with 3 observations of 1-dimensional support
    argvals:
            Values in -17 ... 40.
    values:
            Values in 184.0 ... 1119.0.
    There are 3 - 7 sampling points per observation.




Finally, we can plot the data.


.. code-block:: default


    fig, ax = plot(cd4counts,
                   main='CD4 cell counts',
                   xlab='Month since seroconversion',
                   ylab='CD4 cell count (log-scale)')



.. image:: /auto_examples/images/sphx_glr_plot_cd4_001.png
    :alt: CD4 cell counts
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.873 seconds)


.. _sphx_glr_download_auto_examples_plot_cd4.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_cd4.py <plot_cd4.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_cd4.ipynb <plot_cd4.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
