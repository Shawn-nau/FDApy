.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_example_local_polynomial.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_example_local_polynomial.py:


Local Polynomial Regression
===========================

This notebook shows how to perform a local polynomial regression on
one and two-dimensional data.


.. code-block:: default


    # Author: Steven Golovkine <steven_golovkine@icloud.com>
    # License: MIT

    # shinx_gallery_thumbnail_number = 2

    import matplotlib.pyploy as plt
    import numpy as np

    from FDApy.local_polynomial import LocalPolynomial



We generate some one-dimensional data to perform local polynomial smoothing.



.. code-block:: default


    X = np.random.normal(0, 1, 100)
    Y = 2 * np.sin(X) + np.random.normal(0, 0.25, 100)
    Y_true = 2 * np.sin(np.linspace(-2, 2, 200))


Fit local polynomials



.. code-block:: default


    # Fit local polynomials
    lp = LocalPolynomial(kernel="epanechnikov", bandwidth=2, degree=2)
    lp.fit(X, Y)

    # Plot the results
    plt.scatter(X, Y, alpha=0.5, color='blue', label='Noisy')
    plt.scatter(np.sort(X), lp.X_fit_, color='red', label='Estimated')
    plt.plot(np.linspace(-2, 2, 200), Y_true, 'green', label='True')
    plt.legend()
    plt.show()


Estimate the curve on a regular grid.


.. code-block:: default


    # Estimation on a grid
    y_pred = lp.predict(np.linspace(-2, 2, 500))

    # Plot the results
    plt.scatter(X, Y, alpha=0.5, color='blue', label='noisy')
    plt.scatter(np.linspace(-2, 2, 500), y_pred, color='red', label='Prediction')
    plt.plot(np.linspace(-2, 2, 200), Y_true, color='green', label='True')
    plt.legend()
    plt.show()


We will now do the same using two-dimensional data.



.. code-block:: default


    X = np.random.randn(2, 100)
    Y = -1 * np.sin(X[0]) + 0.5 * np.cos(X[1]) + 0.2 * np.random.randn(100)
    X0 = np.mgrid[-10:10:1, -10:10:1] / 10
    X0 = np.vstack([X0[0].ravel(), X0[1].ravel()])


Fit local polynomials



.. code-block:: default


    # Fit local polynomials
    lp = LocalPolynomial(kernel="epanechnikov", bandwidth=2, degree=1)
    lp.fit(X, Y)

    # Plot the results
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    _ = ax.scatter(X[0], X[1], Y)
    _ = ax.scatter(X[0], X[1], lp.X_fit_, color='red')


Estimate the curve on a regular surface.


.. code-block:: default


    # Estimation on a grid
    y_pred = lp.predict(X0)

    # Plot the results
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    _ = ax.scatter(X[0], X[1], Y)
    _ = ax.scatter(X0[0], X0[1], y_pred, color='red')


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_example_local_polynomial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_local_polynomial.py <example_local_polynomial.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_local_polynomial.ipynb <example_local_polynomial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
